retro

The main goal of this project is to create and store data that can be easily imported into the database.
In the beginning, it was MongoDB "fixed" by Loopback framework. Fixed because it's not the same default MongoDB driver, so it cannot be treated as the usually mongo+express+nodejs project.

But our project evolving -> right now we're not limited to Loopback import. We have
React-based projects, where we are using this data a lot of times and in different ways. We are building right now a replacement to our old servers, using graphQl and serverless(later) approach, and using data from our plugin for mocking.

ML team using similar sets of data, that we have here in different ways. Right now they trying to catch no-food words.
Creation and separation methods that we have in this plugin, really help us to speed up our development process. Collecting different data and different projects under the same roof help us a lot.

Till we didn't move forward with our backend development(aka we relate on our old Loopback servers) and didn't make our major upgrades with this plugin -> we need to keep working with an old version. But new versions evolving more quickly and eating more "time" during the plugin development.



-------------

At the first stage, it was just a separated store of static files.
Then we start to add more methods and then we move everything into our current repository.




---

This is a short list of future changes like 10 titles then 1-2 sentences about it.

Organiz. Problems
- migration to ES6
- code reorganization
- separation static files with autogenerated static files and methods

- instead of having files with flexible structure -> use methods,
that will pack that data and save that stuff at files.

extending functionality"
it's hard to have and keep be aware about files
with similar schemes(as recipes, ingredients) with a different structures inside.

When we decide tod to extend number of rows we get a lot of troubles/errors
Tests should make our plugin better.

Some of our projects(methods) binded together to one case of our working tools are overwhelming.

It contains 300 lines and very confusing. Can be better by separating different methods
-> at helper, and import static files to files.js

===

Right now our plugin are fat only at one place. By fat I mean that it have a lot of completed functionality
We are focused on GS now, but it's not healthy for other projects, because we can do some tasks in bulk.

-----

As one of the first reasons for this plugin, was to use it in import script -> we should make it worth with
import script.
We have 3 similar cases. We need to cover at least one for begining.
4th case related to a new server and requires more attention.


---

We are moving away our documentation website, because when plugin will be split into a few
packages -> it should cover all of them and I will also crystalize our process and content editing.

---

Clean up the same data.

---

Use faker?
Maybe add an addon for some data?
Instead of populating it by hands?

Create task, where we will have all observations from Maria.
And also maybe create comments and advice and my feelings, what can be done in future.

---

Similar ingredients, might have different Departments

This can be decided, changing structure Deps, and all new Ingredients or GL will go through procedure of checking categories.

---

(T) our main language is English and it's bad.

---

Separation of static files will help us to make it easy for applying at other coding languages...

maybe static-data should have JS for support but build should be clean from any stuff. ONLY having JSON????

---

Big object, created for users. (T)

Measurements and Nutritions will be added to our hands too.

===
Footer website: where, template name, Gatsby also maybe page with all sub-plugins, Stack, etc.

---
Images Big & Slick or use colorful illustrations? Fork with knife? or something Better than that.

---
